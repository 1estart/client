const path = require('path');
const rtlcss = require('rtlcss');
const webpack = require('webpack');

const checkIsCss = (filename) => path.extname(filename) === '.css';

class RtlCssPlugin {
    constructor(options) {
        this.options = {
            filename: '[name].rtl.css',
            options: {},
            plugins: [],
            hooks: {},
            ...options,
        };
    }

    processAssets = (compilation, callback) => {
        compilation.chunks.forEach((chunk) => {
            Array.from(chunk.files)
                .filter(checkIsCss)
                .forEach((filename) => {
                    // Get the asset source for each file generated by the chunk:
                    const assetSource = compilation.assets[filename].source();
                    const processedAssetSource = rtlcss.process(
                        assetSource,
                        this.options.options,
                        this.options.plugins,
                        this.options.hooks,
                    );

                    let interpolatedFilePath;

                    if (Array.isArray(this.options.filename)) {
                        if (this.options.filename.length !== 2) {
                            throw Error('You should pass two elements and array');
                        }
                        // also allow save current file destination
                        interpolatedFilePath = filename.replace(
                            this.options.filename[0],
                            this.options.filename[1],
                        );
                    } else {
                        interpolatedFilePath = compilation.getPath(this.options.filename, {
                            chunk,
                            cssFileName: filename,
                        });
                    }
                    compilation.assets[interpolatedFilePath] = new webpack.sources.RawSource(
                        processedAssetSource,
                    );
                    if (this.options.addToChunkFiles) {
                        /* for example: LoadablePlugin will add this chunks to loadable config, but it's not always required */
                        chunk.files.add(interpolatedFilePath);
                    }
                });
        });

        callback();
    };

    apply(compiler) {
        compiler.hooks.compilation.tap('RtlCssPlugin', (compilation) => {
            compilation.hooks.processAssets.tapAsync(
                {
                    name: 'RtlCssPlugin-processing',
                    stage: compilation.PROCESS_ASSETS_STAGE_OPTIMIZE,
                },
                (chunks, callback) => this.processAssets(compilation, callback),
            );
        });
    }
}

module.exports = RtlCssPlugin;
